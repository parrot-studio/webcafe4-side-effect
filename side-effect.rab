= 希望の関数と\n絶望の((*副作用*))

: subtitle
   （非）日常編
: author
   ぱろっと(@parrot-studio)
: date
   2013/08/31
# : allotted-time
#    5m
: theme
   theme-webcafe4

= Profile

* ぱろっと（(('tag:small:T.Tachiki'))）
* @parrot_studio
* parrot-studio.com
* プログラマっぽい何か
* （比較的）言語マニア

= 今日のテーマ

= ((*副\n作\n用*))

= you may say...

(('tag:center'))(('tag:x-large:"また関数型ですか？(´-ω-)"'))

= だが待ってほしい

= ((*Scala*))とか\n((*Haskell*))の\n話はしない

= この辺も今日はどうでもいい

 * 参照透明性
 * 遅延評価
 * モナド
 * etc…

= ((*副作用*))って？

  # blockquote
  # title = 副作用 (プログラム) - Wikipedia
  ある機能がコンピュータの(論理的な)状態を変化させ、それ以降で得られる結果に影響を与えることをいう。\n代表的な例は変数への値の代入である。

= 副作用が「ある」とは？

 * 何かをした結果、状態が変化する
 * 同じ値を渡しても、同じ結果とは限らない
 * 「破壊的である」

=  副作用が「ある」例

  # coderay ruby
  def add(n)
    @count = @count + n
    @count
  end
  
  @count = 0
  add(1) # => 1
  add(1) # => 2
  
  @count = 10
  add(1) # => 11

= 副作用が「ない」とは？

 * 何かをしても、状態が変化しない
 * ある値を渡せば、必ず対応する値が返る
 * 「非破壊的である」

=  副作用が「ない」例

  # coderay ruby
  def countup(count, n)
    count + n
  end
  
  countup(0, 1) # => 1
  countup(0, 1) # => 1
  countup(1, 1) # => 2
  countup(countup(0, 1), 1) # => 2

= 余談

Rubyではメソッド名で区別できる「場合もある」

  # coderay ruby
  
  s = 'hoge'
  
  s.gsub(/hoge/, 'piyo') # => 'piyo'
  puts s # => 'hoge' # 元の値は維持されている
  
  s.gsub!(/hoge/, 'piyo') # => 'piyo'
  puts s # => 'piyo' # 元の値が破壊された

= 一般的にI/Oが絡むものは副作用がある

  # coderay ruby
  Time.now # => 「今」の時刻
  
  Random.next # => 「ランダム」な値
  
  File.read('hoge.txt')
  # => ファイルの中身で決まるし、例外の可能性も

= あまりコードに興味がない？

= な\nら\nば

= ((*「テスト」*))という観点で考える

= "副作用がないもの"のテスト

 * 入力を与えて出力をみるだけ
 * 場合によってはコードを見るだけでバグの有無がわかる
 * 結合テストもすぐできる
 * 遊ぶ時間が作れる
 * 精神的に安定

= 簡単\n(`･ω･´)

= "副作用があるもの"のテスト

 * まず環境を揃える
 * 次に入力を与えて出力をみる
 * 例外が発生した場合の動作とかもチェックする
 * 結合すると問題が出やすい
 * 遊ぶ時間が削られる
 * 精神的に追い込まれる

= めんどい\n(´-ω-)

= "副作用のない世界"

(('tag:center'))「理想的関数型\nプログラミングの世界」

(('tag:center'))＝

(('tag:center'))「全く副作用がない」

= but

= "現実"に\n((*"I/Oのないシステム"は存在しない*))

= な\nら\nば

= 副作用を\n((*局所的に*))\n押さえ込む

= あまり良くない例

  # blockquote
  read\n
  処理\n
  write\n
  read\n
  処理\n
  write\n
  ...

= 比較的良い例

  # blockquote
  一括read\n
  副作用のない処理1\n
  副作用のない処理2\n
  副作用のない処理3\n
  ...\n
  一括write\n

(('tag:right'))(('note:そもそも、一括にしないとトランザクションの問題も(´-ω-)'))


= 他にも、テストできるように引数を考えるとか

  # coderay ruby
  # 「今」としか比較できない
  def expired?(time)
    Time.now - time > 30 ? true : false
  end
  
  # 任意の時間と比較可能＝自由にテストできる
  def expired?(time, base = nil)
    base ||= Time.now
    base - time > 30 ? true : false
  end

= "副作用のないシステム"

(('tag:center'))(('tag:large:大きな系として\\n「外」から見たときに\\n「入力に対して出力が一定」というのも大事'))\n\n（APIやライブラリ等）

= "副作用のないシステム"

(('tag:center'))(('tag:large:並列処理では特に重要'))

(('tag:center'))(('tag:small:Webシステムもリクエストを\\n並列で処理しているのを\\nお忘れなく(`･ω･´)'))

= 繰り返しますが

= 大事なこと

関数型言語を知らなくても、\n((*関数型の考え方*))を知っていると\n"堅牢なシステム"を作りやすい

= まずは((*「副作用があるか？」*))を意識してみてはどうでしょう\n(´･ω･)？

= ありがとうございました\n(´･ω･)っ旦~

= おまけ

「代入」を一度も使わないBrainf**kインタプリタ by Scala

(('tag:small:http://parrot.hatenadiary.jp/entry/2013/08/06/121645'))

= 参考までに・・・

Q. 「ダンガンロンパ　希望の学園と絶望の高校生」とは？

A. 限りなく絶望的な状況から希望を勝ち取る物語です(`･ω･´)

(('tag:right'))(('note:http://www.danganronpa.com/'))
